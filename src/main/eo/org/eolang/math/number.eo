# The MIT License (MIT)
#
# Copyright (c) 2021-2022 Max Trunnikov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+package org.eolang.math
+home https://github.com/objectionary/eo-math
+version 0.0.0
+alias org.eolang.math.positive-infinity
+alias org.eolang.math.nan
+alias org.eolang.switch
+rt jvm org.eolang:eo-math:0.0.0

[n] > number
  n > @
  # Checking type of the number's decorator.
  # If $.n is int, return true, otherwise false.
  [] > is-int
    if. > @
      eq.
        ^
        0
      FALSE
      eq.
        div.
          ^
          ^
        1

  # Checking type of the number's decorator.
  # If $.n is float, return true, otherwise false.
  [] > is-float
    if. > @
      eq.
        ^
        0.0
      TRUE
      eq.
        div.
          ^
          ^
        1.0

  # Checking if number is NaN
  [] > is-nan
    eq. > @
      ^.as-bytes
      7F-C0-00-00

  [x] > xor
    if. > @
      is-int
      as-int.
        xor.
          ^.as-bytes
          x.as-bytes
      []
        "xor cannot be applied to float" > msg

  [x] > or
    if. > @
      is-int
      as-int.
        or.
          ^.as-bytes
          x.as-bytes
      []
        "or cannot be applied to float" > msg

  [x] > and
    if. > @
      is-int
      as-int.
        and.
          ^.as-bytes
          x.as-bytes
      []
        "and cannot be applied to float" > msg

  # Calculate bitwise left shift
  [x] > left
    if. > @
      is-int
      as-int.
        left.
          ^.as-bytes
          x
      []
        "left cannot be applied to float" > msg

  # Calculate bitwise right shift
  [x] > right
    if. > @
      is-int
      as-int.
        right.
          ^.as-bytes
          x
      []
        "right cannot be applied to float" > msg

  # Tests that $.n â‰  x
  [x] > neq
    (^.eq x).not > @

  # Calculate MOD
  [x] > mod
    ^ > dividend
    x > divisor

    if. > @
      divisor.eq 0
      []
        "mod by zero" > msg
      if.
        dividend.gt 0
        abs-mod
        neg.
          abs-mod

    [] > abs-mod
      (number dividend).abs > int-abs
      (number divisor).abs > x-abs
      minus. > @
        int-abs
        x-abs.times
          int-abs.div x-abs

  # Absolute value of $.n (i.e., with no sign)
  [] > abs
    if. > @
      is-int
      if.
        ^.gte 0
        ^
        ^.neg
      if.
        ^.gte 0.0
        ^
        ^.neg

  # Make ^.n power x
  [x] > pow /?

  # Make ^.n power x
  [x] > power
    if. > x-as-float!
      (number x).is-nan > x-is-nan!
      nan
      (number x).as-float

    as-float > self-as-float!

    [y] > powf
      if. > @
        y.gt 0.0
        times.
          self-as-float
          ^.powf (y.minus 1.0)
        1.0

    switch > @
      *
        or.
          x-is-nan
          is-nan
        nan
      *
        x-as-float.eq 0.0
        1.0
      *
        x-as-float.lt 0.0
        if.
          self-as-float.eq 0.0
          positive-infinity
          div.
            1.0
            powf
              neg.
                x-as-float
      *
        x-as-float.gt 0.0
        if.
          self-as-float.eq 0.0
          0.0
          powf x-as-float

  # Converts ^.n to float
  [] > as-float /float

  # Converts this to int
  [] > as-int /int

  # Converts ^.n to string
  [] > as-string /string

  # Sign of $ (-1, 0, or 1) if $ is int
  # or (-1.0, 0.0, or 1.0) if $ is float
  [] > signum
    if. > @
      is-int
      if.
        ^.lt 0
        -1
        if.
          ^.eq 0
          0
          1
      if.
        ^.lt 0.0
        -1.0
        if.
          ^.eq 0.0
          0.0
          1.0
