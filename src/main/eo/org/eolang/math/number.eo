# The MIT License (MIT)
#
# Copyright (c) 2021-2022 Max Trunnikov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.math.nan
+alias org.eolang.math.negative-infinity
+alias org.eolang.math.positive-infinity
+alias org.eolang.switch
+home https://github.com/objectionary/eo-math
+package org.eolang.math
+rt jvm org.eolang:eo-math:0.0.0
+version 0.0.0

[n] > number
  # Checking type of the number's decorator.
  # If $.n is int, return true, otherwise false.
  [] > is-int
    ^.n > value!
    if. > @
      value.eq 0
      TRUE
      if.
        value.eq 0.0
        FALSE
        eq.
          div.
            value
            value
          1

  # Checking type of the number's decorator.
  # If $.n is float, return true, otherwise false.
  [] > is-float
    ^.n > value!
    if. > @
      value.eq 0.0
      TRUE
      if.
        value.eq 0
        FALSE
        eq.
          div.
            value
            value
          1.0

  # Checking if number is NaN
  [] > is-nan
    eq. > @
      ^.n.as-bytes
      7F-C0-00-00

  [x] > xor
    if. > @
      is-int
      as-int.
        xor.
          ^.n.as-bytes
          x.as-bytes
      error "xor cannot be applied to float"

  [x] > or
    if. > @
      is-int
      as-int.
        or.
          ^.n.as-bytes
          x.as-bytes
      error "or cannot be applied to float"

  [x] > and
    if. > @
      is-int
      as-int.
        and.
          ^.n.as-bytes
          x.as-bytes
      error "and cannot be applied to float"

  # Calculate bitwise left shift
  [x] > left
    if. > @
      is-int
      as-int.
        left.
          ^.n.as-bytes
          x
      error "left cannot be applied to float"

  # Calculate bitwise right shift
  [x] > right
    if. > @
      is-int
      as-int.
        right.
          ^.n.as-bytes
          x
      error "right cannot be applied to float"

  # Tests that $.n â‰  x
  [x] > neq
    (^.n.eq x).not > @

  # Calculate MOD
  [x] > mod
    ^.n > dividend!
    x > divisor!

    if. > @
      divisor.eq 0
      error "mod by zero"
      if.
        dividend.gt 0
        abs-mod
        neg.
          abs-mod

    [] > abs-mod
      (number dividend).abs > int-abs!
      (number divisor).abs > x-abs!
      minus. > @
        int-abs
        x-abs.times
          int-abs.div x-abs

  # Absolute value of $.n (i.e., with no sign)
  [] > abs
    ^.n > value!
    if. > @
      is-int
      if.
        value.gte 0
        value
        value.neg
      if.
        value.gte 0.0
        value
        value.neg

  # Round ^.n up
  [] > ceil
    ^.n > value!
    if. > @
      or.
        is-nan
        is-int
        eq.
          value
          positive-infinity
        eq.
          value
          negative-infinity
      value
      []
        as-int > self-as-int!
        if. > @
          value.lte 0.0
          self-as-int
          self-as-int.plus 1

  # Make ^.n power x
  [x] > pow /?

  # Make ^.n power x
  # @todo #21:30 min. Add an ability to raise a number to float power.
  #  `exp` and `ln` objects are needed.  sqr(n,x) = exp(n * ln(x))
  #
  # @todo #51:30min. Create number.is-infinite object and make power and ln
  #  objects use it. number.is-infinite has to check either ^.n is
  #  positive-infinity or negative-infinity
  [x] > power
    if. > @
      or.
        is-nan.
          number x > x-as-num
        is-nan
      nan
      []
        [num] > is-infinite
          or. > @
            num.eq positive-infinity
            num.eq negative-infinity

        if. > x-as-float!
          is-infinite x > x-is-inf!
          x
          if.
            x-as-num.is-int > x-is-int!
            x-as-num.as-float
            x

        if. > self-as-float!
          is-infinite > self-is-inf!
            ^.^.n > value!
          value
          if.
            is-int > self-is-int!
            as-float
            value

        and. > both-are-int!
          x-is-int
          self-is-int

        [n p] > bin-powi
          if. > @
            p.eq 0
            1
            []
              bin-powi > res!
                n
                p.div 2

              res.times res > res-x-res!

              if. > @
                eq.
                  mod.
                    number p
                    2
                  1
                res-x-res.times n
                res-x-res

        [n p] > bin-powf
          if. > @
            p.eq 0.0
            1.0
            []
              bin-powf > res!
                n
                as-float.
                  number
                    as-int.
                      number
                        div.
                          p
                          2.0

              res.times res > res-x-res!

              if. > @
                eq.
                  mod.
                    number
                      (number p).as-int
                    2
                  1
                res-x-res.times n
                res-x-res

        switch > @
          *
            x-as-float.eq 0.0
            if.
              both-are-int
              1
              1.0
          *
            x-as-float.lt 0.0
            if.
              self-as-float.eq 0.0 > self-is-zero!
              positive-infinity
              if.
                or. > self-or-x-is-inf!
                  self-is-inf
                  x-is-inf
                0.0
                div.
                  1.0
                  bin-powf
                    self-as-float
                    neg.
                      x-as-float
          *
            x-as-float.gt 0.0
            if.
              self-is-zero
              if.
                both-are-int
                0
                0.0
              switch
                *
                  and.
                    self-as-float.lt 0.0
                    x-is-inf
                  nan
                *
                  and.
                    self-as-float.gt 0.0
                    self-or-x-is-inf
                  positive-infinity
                *
                  and.
                    self-as-float.eq negative-infinity
                    x-is-inf.not
                  if.
                    x-is-int.not
                    positive-infinity
                    if.
                      eq.
                        mod.
                          x-as-num
                          2
                        0
                      positive-infinity
                      negative-infinity
                *
                  TRUE
                  if.
                    both-are-int
                    bin-powi value x
                    bin-powf self-as-float x-as-float

  # Converts ^.n to float
  [] > as-float /float

  # Converts this to int
  [] > as-int /int

  # Converts ^.n to string
  [] > as-string /string

  # Sign of $ (-1, 0, or 1) if $ is int
  # or (-1.0, 0.0, or 1.0) if $ is float
  [] > signum
    if. > @
      is-int
      if.
        ^.n.lt 0
        -1
        if.
          ^.n.eq 0
          0
          1
      if.
        ^.n.lt 0.0
        -1.0
        if.
          ^.n.eq 0.0
          0.0
          1.0
